1. Для ресурсов, возвращающих HTML-страницы, реализовать авторизацию через login-форму.
Остальные /api ресурсы, возвращающие JSON, закрывать не нужно!
2.1* Реализовать таблицы User(id, name, password) и Role(id, name), связанные многие ко многим
2.2* Реализовать UserDetailsService, который предоставляет данные из БД (таблицы User и Role)
3.3* Ресурсы выдачей (issue) доступны обладателям роли admin
3.4* Ресурсы читателей (reader) доступны всем обладателям роли reader
3.5* Ресурсы книг (books) доступны всем авторизованным пользователям


Для реализации указанных требований, потребуется выполнить следующие шаги:

Авторизация через login-форму для HTML-страниц:
Создать страницу для ввода логина и пароля (например, login.html).
Настроить Spring Security для обработки запросов на эту страницу и проверки учетных данных пользователя.
Используем аннотации @GetMapping и @PostMapping для настройки контроллера, обрабатывающего запросы на эту страницу и проверяющего учетные данные.

Реализация таблиц User и Role:
Создать сущности User и Role, а также репозитории для взаимодействия с базой данных.
Установить связь многие ко многим между таблицами User и Role, например, с помощью аннотации @ManyToMany.

Реализация UserDetailsService:
Создайть класс, реализующий интерфейс UserDetailsService.
В методе loadUserByUsername() этого класса получить данные о пользователе и его ролях из базы данных и верните объект UserDetails.

Ограничение доступа к ресурсам:
Используем аннотации @PreAuthorize для ограничения доступа к различным ресурсам в зависимости от ролей пользователей.
Для ресурсов выдачи (issue) установим ограничение доступа только для пользователей с ролью admin.
Для ресурсов читателей (reader) установим ограничение доступа для всех пользователей с ролью reader.
Для ресурсов книг (books) установим ограничение доступа для всех авторизованных пользователей, не зависимо от роли.
