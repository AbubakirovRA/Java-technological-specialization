Task:
public class Homework {

  /**
   * 0. Разобраться с написанным кодом в классах Server и Client.
   * 1. Если в начале сообщения есть '@4' - то значит отсылаем сообщеине клиенту с идентификатором 4.
   * 2. Если в начале сообщения нет '@' - значит, это сообщение нужно послать остальным клиентам.
   * 3.* Добавить админское подключение, которое может кикать других клиентов.
   * 3.1 При подключении оно посылает спец. сообщение, подтверждающее, что это - админ.
   * 3.2 Теперь, если админ посылает сообщение kick 4 - то отключаем клиента с идентификатором 4.
   * 4.** Подумать, как лучше структурировать программу (раскидать код по классам).
   */



// Программа представляет собой простой чат-сервер с использованием сокетов в Java.
//
//Server (Сервер):
//
    //ServerSocket: Создается серверный сокет, который слушает определенный порт (в данном случае, 8181).
    //Бесконечный Цикл: Программа находится в бесконечном цикле, ожидая подключений новых клиентов.
    //Подключение Клиента: Когда новый клиент подключается, создается объект SocketWrapper,
        // который оборачивает сокет клиента и предоставляет методы для ввода и вывода.
    //Новый Поток: Для каждого клиента создается новый поток (ClientHandler), чтобы обработать его сообщения асинхронно.
    //Обработка Клиента: Внутри ClientHandler обрабатывается ввод и вывод для каждого клиента.
        // Клиент может отправлять сообщения всем, отправлять личные сообщения, отключаться или даже "кикать"
        //  других клиентов, если он является администратором.
    //Закрытие Сокета: При выходе из цикла или отключении клиента его сокет закрывается.
    // Для выхода из сервера набрать в консоли сервера quit.

//Client (Клиент):
//
    //Socket: Создается клиентский сокет, который подключается к серверу на localhost и порту 8181.
    //Поток Чтения: Запускается отдельный поток для чтения входящих сообщений от сервера.
    //Поток Записи: Запускается отдельный поток для отправки сообщений на сервер.
    //Ввод с Консоли: Пользователь вводит сообщения в консоль. Если введено "q", клиент закрывает соединение.

//SocketWrapper (Обертка Сокета):
//
    //Инкапсуляция: Оборачивает сокет клиента, предоставляя удобный интерфейс для ввода и вывода.
    //Логика Аутентификации: Определяет, является ли клиент администратором (в данном случае, всегда true).

//Логгирование:
//
    //Весь код снабжен логгированием (SLF4J), чтобы отслеживать события и ошибки в работе сервера.

//Программа создает сервер, принимает подключения от клиентов, обрабатывает их сообщения 
// и предоставляет простой консольный интерфейс для общения.

//Запуск программы из консоли:
// Из корневого каталога проекта (там где файл pom.xml)
// выполнить команду mvn clean compile

//команда mvn exec:java -Dexec.mainClass="ru.gb.lesson5.Main" запускает сервер
//команда mvn exec:java -Dexec.mainClass="ru.gb.lesson5.Client" запускает клиентов

// mvn: Это команда для запуска Maven (Maven – система управления проектами).
// exec:java: Это цель Maven, предоставляемая плагином exec, который выполняет код на языке Java.
// -Dexec.mainClass="ru.gb.lesson5.Client": Это параметр командной строки, который указывает класс, содержащий метод main, который нужно выполнить.
